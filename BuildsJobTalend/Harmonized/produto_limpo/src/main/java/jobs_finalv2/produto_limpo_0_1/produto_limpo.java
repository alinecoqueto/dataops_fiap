// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package jobs_finalv2.produto_limpo_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: produto_limpo Purpose: aaa<br>
 * Description: aaaaaa <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class produto_limpo implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "produto_limpo";
	private final String projectName = "JOBS_FINALV2";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				produto_limpo.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(produto_limpo.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Float StandardCost;

				public Float getStandardCost () {
					return this.StandardCost;
				}
				
			    public Float ListPrice;

				public Float getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Weight;

				public String getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ListPrice = null;
           				} else {
           			    	this.ListPrice = dis.readFloat();
           				}
					
					this.Size = readString(dis);
					
					this.Weight = readString(dis);
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readString(dis);
					
					this.SellEndDate = readString(dis);
					
					this.DiscontinuedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Float
				
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.StandardCost);
		            	}
					
					// Float
				
						if(this.ListPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ListPrice);
		            	}
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Weight,dos);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.SellStartDate,dos);
					
					// String
				
						writeString(this.SellEndDate,dos);
					
					// String
				
						writeString(this.DiscontinuedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+Weight);
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Float StandardCost;

				public Float getStandardCost () {
					return this.StandardCost;
				}
				
			    public Float ListPrice;

				public Float getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Weight;

				public String getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String SellStartDate;

				public String getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public String SellEndDate;

				public String getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public String DiscontinuedDate;

				public String getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public String ThumbNailPhoto;

				public String getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ListPrice = null;
           				} else {
           			    	this.ListPrice = dis.readFloat();
           				}
					
					this.Size = readString(dis);
					
					this.Weight = readString(dis);
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readString(dis);
					
					this.SellEndDate = readString(dis);
					
					this.DiscontinuedDate = readString(dis);
					
					this.ThumbNailPhoto = readString(dis);
					
					this.ThumbnailPhotoFileName = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Float
				
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.StandardCost);
		            	}
					
					// Float
				
						if(this.ListPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ListPrice);
		            	}
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Weight,dos);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.SellStartDate,dos);
					
					// String
				
						writeString(this.SellEndDate,dos);
					
					// String
				
						writeString(this.DiscontinuedDate,dos);
					
					// String
				
						writeString(this.ThumbNailPhoto,dos);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+Weight);
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+SellStartDate);
		sb.append(",SellEndDate="+SellEndDate);
		sb.append(",DiscontinuedDate="+DiscontinuedDate);
		sb.append(",ThumbNailPhoto="+ThumbNailPhoto);
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File("C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/harmonized/FH_product.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
                String[] headColutFileOutputDelimited_5=new String[13];
            class CSVBasicSet_tFileOutputDelimited_5{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_5[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_5 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_5[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_5 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_5[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_5[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_5 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 =0;
            int currentRow_tFileOutputDelimited_5 = 0;


            CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
            csvSettings_tFileOutputDelimited_5.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                            if(fileToDelete_tFileOutputDelimited_5.exists()) {
                                fileToDelete_tFileOutputDelimited_5.delete();
                            }
                            CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_5.setSeparator(csvSettings_tFileOutputDelimited_5.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_5.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_5.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_5.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_5.setLineEnd(""+csvSettings_tFileOutputDelimited_5.getRowDelim());
                    }
                        if(filetFileOutputDelimited_5.length()==0){
                                    headColutFileOutputDelimited_5[0]="ProductID";
                                    headColutFileOutputDelimited_5[1]="ProductNumber";
                                    headColutFileOutputDelimited_5[2]="Name";
                                    headColutFileOutputDelimited_5[3]="Color";
                                    headColutFileOutputDelimited_5[4]="StandardCost";
                                    headColutFileOutputDelimited_5[5]="ListPrice";
                                    headColutFileOutputDelimited_5[6]="Size";
                                    headColutFileOutputDelimited_5[7]="Weight";
                                    headColutFileOutputDelimited_5[8]="ProductCategoryID";
                                    headColutFileOutputDelimited_5[9]="ProductModelID";
                                    headColutFileOutputDelimited_5[10]="SellStartDate";
                                    headColutFileOutputDelimited_5[11]="SellEndDate";
                                    headColutFileOutputDelimited_5[12]="DiscontinuedDate";
                            CsvWritertFileOutputDelimited_5.writeNext(headColutFileOutputDelimited_5);
                            CsvWritertFileOutputDelimited_5.flush();
                        }
                CsvWritertFileOutputDelimited_5.setEscapeChar(csvSettings_tFileOutputDelimited_5.getEscapeChar());
                CsvWritertFileOutputDelimited_5.setQuoteChar(csvSettings_tFileOutputDelimited_5.getTextEnclosure());
                CsvWritertFileOutputDelimited_5.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_5", CsvWritertFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;	
				
				char fieldSeparator_tFileInputDelimited_5[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_5[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_5 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_5 = /** Start field tFileInputDelimited_5:FILENAME */"C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/raw/Product.csv"/** End field tFileInputDelimited_5:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;
	
				try{
					
						String[] rowtFileInputDelimited_5=null;
						int currentLinetFileInputDelimited_5 = 0;
	        			int outputLinetFileInputDelimited_5 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0;
			if(footer_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5)),"US-ASCII")), fieldSeparator_tFileInputDelimited_5[0]);
		        			}
					
					
					csvReadertFileInputDelimited_5.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )
	        			csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
	        				csvReadertFileInputDelimited_5.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_5.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_5 > 0){
						for(totalLinetFileInputDelimited_5=0;totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++){
							csvReadertFileInputDelimited_5.readNext();
						}
						csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_5.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_5++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5   < 0? 0 : totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5 ;
	            		if(lastLinetFileInputDelimited_5 > 0){
	                		lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5 : lastLineTemptFileInputDelimited_5; 
	            		}else {
	                		lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
	            		}
	         
			          	csvReadertFileInputDelimited_5.close();
				        if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5)),"US-ASCII")), fieldSeparator_tFileInputDelimited_5[0]);
						}
						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )	
	        				csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
							csvReadertFileInputDelimited_5.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_5.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_5 != 0){
			        	for(currentLinetFileInputDelimited_5=0;currentLinetFileInputDelimited_5 < 1;currentLinetFileInputDelimited_5++){
			        		csvReadertFileInputDelimited_5.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_5.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_5 != 0 && csvReadertFileInputDelimited_5!=null && csvReadertFileInputDelimited_5.readNext() ) { 
	        		rowstate_tFileInputDelimited_5.reset();
	        
		        	rowtFileInputDelimited_5=csvReadertFileInputDelimited_5.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_5++;
	            
		            if(lastLinetFileInputDelimited_5 > -1 && currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_5++;
	            	if (limittFileInputDelimited_5 > 0 && outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
	                	break;
	            	}  
	                                                                      
					
	    							row4 = null;			
								
								boolean whetherReject_tFileInputDelimited_5 = false;
								row4 = new row4Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])){//empty line when row separator is '\n'
					
							row4.ProductID = null;
					
							row4.ProductNumber = null;
					
							row4.Name = null;
					
							row4.Color = null;
					
							row4.StandardCost = null;
					
							row4.ListPrice = null;
					
							row4.Size = null;
					
							row4.Weight = null;
					
							row4.ProductCategoryID = null;
					
							row4.ProductModelID = null;
					
							row4.SellStartDate = null;
					
							row4.SellEndDate = null;
					
							row4.DiscontinuedDate = null;
					
							row4.ThumbNailPhoto = null;
					
							row4.ThumbnailPhotoFileName = null;
					
							row4.rowguid = null;
					
							row4.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_5 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_5 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row4.ProductID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductID", "row4", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row4.ProductID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.ProductID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.ProductNumber = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.ProductNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.Name = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.Name = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.Color = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.Color = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row4.StandardCost = ParserUtils.parseTo_Float(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"StandardCost", "row4", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row4.StandardCost = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.StandardCost = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row4.ListPrice = ParserUtils.parseTo_Float(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ListPrice", "row4", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row4.ListPrice = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.ListPrice = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.Size = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.Size = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.Weight = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.Weight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row4.ProductCategoryID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductCategoryID", "row4", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row4.ProductCategoryID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.ProductCategoryID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row4.ProductModelID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductModelID", "row4", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row4.ProductModelID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.ProductModelID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.SellStartDate = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.SellStartDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.SellEndDate = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.SellEndDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.DiscontinuedDate = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.DiscontinuedDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.ThumbNailPhoto = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.ThumbNailPhoto = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.ThumbnailPhotoFileName = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.ThumbnailPhotoFileName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.rowguid = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row4.ModifiedDate = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row4.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_5.getException()!=null) {
										throw rowstate_tFileInputDelimited_5.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_5 = true;
        							
                							System.err.println(e.getMessage());
                							row4 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.ProductID = row4.ProductID ;
out4_tmp.ProductNumber = row4.ProductNumber ;
out4_tmp.Name = row4.Name ;
out4_tmp.Color = row4.Color ;
out4_tmp.StandardCost = row4.StandardCost ;
out4_tmp.ListPrice = row4.ListPrice ;
out4_tmp.Size = row4.Size ;
out4_tmp.Weight = row4.Weight ;
out4_tmp.ProductCategoryID = row4.ProductCategoryID ;
out4_tmp.ProductModelID = row4.ProductModelID ;
out4_tmp.SellStartDate = row4.SellStartDate ;
out4_tmp.SellEndDate = row4.SellEndDate ;
out4_tmp.DiscontinuedDate = row4.DiscontinuedDate ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					


                        String[] rowtFileOutputDelimited_5=new String[13];
                            rowtFileOutputDelimited_5[0]=out4.ProductID == null ? null : String.valueOf(out4.ProductID);
                            rowtFileOutputDelimited_5[1]=out4.ProductNumber == null ? null : out4.ProductNumber;
                            rowtFileOutputDelimited_5[2]=out4.Name == null ? null : out4.Name;
                            rowtFileOutputDelimited_5[3]=out4.Color == null ? null : out4.Color;
                            rowtFileOutputDelimited_5[4]=out4.StandardCost == null ? null : String.valueOf(out4.StandardCost);
                            rowtFileOutputDelimited_5[5]=out4.ListPrice == null ? null : String.valueOf(out4.ListPrice);
                            rowtFileOutputDelimited_5[6]=out4.Size == null ? null : out4.Size;
                            rowtFileOutputDelimited_5[7]=out4.Weight == null ? null : out4.Weight;
                            rowtFileOutputDelimited_5[8]=out4.ProductCategoryID == null ? null : String.valueOf(out4.ProductCategoryID);
                            rowtFileOutputDelimited_5[9]=out4.ProductModelID == null ? null : String.valueOf(out4.ProductModelID);
                            rowtFileOutputDelimited_5[10]=out4.SellStartDate == null ? null : out4.SellStartDate;
                            rowtFileOutputDelimited_5[11]=out4.SellEndDate == null ? null : out4.SellEndDate;
                            rowtFileOutputDelimited_5[12]=out4.DiscontinuedDate == null ? null : out4.DiscontinuedDate;
                nb_line_tFileOutputDelimited_5++;
                resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);
                                       CsvWritertFileOutputDelimited_5.writeNext(rowtFileOutputDelimited_5);




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	


				nb_line_tFileInputDelimited_5++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_5!=null){
    					csvReadertFileInputDelimited_5.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_5!=null){
    				globalMap.put("tFileInputDelimited_5_NB_LINE",nb_line_tFileInputDelimited_5);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_5!=null) {
				    	CsvWritertFileOutputDelimited_5.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_5");
					
						if(CsvWritertFileOutputDelimited_5!=null) {
					    	CsvWritertFileOutputDelimited_5.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ParentProductCategoryID;

				public String getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductCategoryID = readInteger(dis);
					
					this.ParentProductCategoryID = readString(dis);
					
					this.Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ParentProductCategoryID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ParentProductCategoryID="+ParentProductCategoryID);
		sb.append(",Name="+Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ParentProductCategoryID;

				public String getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductCategoryID = readInteger(dis);
					
					this.ParentProductCategoryID = readString(dis);
					
					this.Name = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ParentProductCategoryID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ParentProductCategoryID="+ParentProductCategoryID);
		sb.append(",Name="+Name);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out5Struct out5 = new out5Struct();





	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File("C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/harmonized/FH_ProductCategory.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
                String[] headColutFileOutputDelimited_6=new String[3];
            class CSVBasicSet_tFileOutputDelimited_6{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_6[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_6 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_6[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_6 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_6[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_6[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_6 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 =0;
            int currentRow_tFileOutputDelimited_6 = 0;


            CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
            csvSettings_tFileOutputDelimited_6.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
                            if(fileToDelete_tFileOutputDelimited_6.exists()) {
                                fileToDelete_tFileOutputDelimited_6.delete();
                            }
                            CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_6.setSeparator(csvSettings_tFileOutputDelimited_6.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_6.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_6.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_6.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_6.setLineEnd(""+csvSettings_tFileOutputDelimited_6.getRowDelim());
                    }
                        if(filetFileOutputDelimited_6.length()==0){
                                    headColutFileOutputDelimited_6[0]="ProductCategoryID";
                                    headColutFileOutputDelimited_6[1]="ParentProductCategoryID";
                                    headColutFileOutputDelimited_6[2]="Name";
                            CsvWritertFileOutputDelimited_6.writeNext(headColutFileOutputDelimited_6);
                            CsvWritertFileOutputDelimited_6.flush();
                        }
                CsvWritertFileOutputDelimited_6.setEscapeChar(csvSettings_tFileOutputDelimited_6.getEscapeChar());
                CsvWritertFileOutputDelimited_6.setQuoteChar(csvSettings_tFileOutputDelimited_6.getTextEnclosure());
                CsvWritertFileOutputDelimited_6.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_6", CsvWritertFileOutputDelimited_6);
resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;	
				
				char fieldSeparator_tFileInputDelimited_6[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_6[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_6 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */"C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/raw/ProductCategory.csv"/** End field tFileInputDelimited_6:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;
	
				try{
					
						String[] rowtFileInputDelimited_6=null;
						int currentLinetFileInputDelimited_6 = 0;
	        			int outputLinetFileInputDelimited_6 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0;
			if(footer_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"US-ASCII")), fieldSeparator_tFileInputDelimited_6[0]);
		        			}
					
					
					csvReadertFileInputDelimited_6.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )
	        			csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
	        				csvReadertFileInputDelimited_6.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_6.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_6 > 0){
						for(totalLinetFileInputDelimited_6=0;totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++){
							csvReadertFileInputDelimited_6.readNext();
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_6.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_6++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6   < 0? 0 : totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6 ;
	            		if(lastLinetFileInputDelimited_6 > 0){
	                		lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6 : lastLineTemptFileInputDelimited_6; 
	            		}else {
	                		lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
	            		}
	         
			          	csvReadertFileInputDelimited_6.close();
				        if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"US-ASCII")), fieldSeparator_tFileInputDelimited_6[0]);
						}
						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )	
	        				csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
							csvReadertFileInputDelimited_6.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_6.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_6 != 0){
			        	for(currentLinetFileInputDelimited_6=0;currentLinetFileInputDelimited_6 < 1;currentLinetFileInputDelimited_6++){
			        		csvReadertFileInputDelimited_6.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6!=null && csvReadertFileInputDelimited_6.readNext() ) { 
	        		rowstate_tFileInputDelimited_6.reset();
	        
		        	rowtFileInputDelimited_6=csvReadertFileInputDelimited_6.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_6++;
	            
		            if(lastLinetFileInputDelimited_6 > -1 && currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_6++;
	            	if (limittFileInputDelimited_6 > 0 && outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
	                	break;
	            	}  
	                                                                      
					
	    							row5 = null;			
								
								boolean whetherReject_tFileInputDelimited_6 = false;
								row5 = new row5Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])){//empty line when row separator is '\n'
					
							row5.ProductCategoryID = null;
					
							row5.ParentProductCategoryID = null;
					
							row5.Name = null;
					
							row5.rowguid = null;
					
							row5.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_6 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_6 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
										row5.ProductCategoryID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductCategoryID", "row5", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row5.ProductCategoryID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row5.ProductCategoryID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row5.ParentProductCategoryID = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row5.ParentProductCategoryID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row5.Name = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row5.Name = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row5.rowguid = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row5.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row5.ModifiedDate = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row5.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_6.getException()!=null) {
										throw rowstate_tFileInputDelimited_6.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_6 = true;
        							
                							System.err.println(e.getMessage());
                							row5 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.ProductCategoryID = row5.ProductCategoryID ;
out5_tmp.ParentProductCategoryID = row5.ParentProductCategoryID ;
out5_tmp.Name = row5.Name ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					


                        String[] rowtFileOutputDelimited_6=new String[3];
                            rowtFileOutputDelimited_6[0]=out5.ProductCategoryID == null ? null : String.valueOf(out5.ProductCategoryID);
                            rowtFileOutputDelimited_6[1]=out5.ParentProductCategoryID == null ? null : out5.ParentProductCategoryID;
                            rowtFileOutputDelimited_6[2]=out5.Name == null ? null : out5.Name;
                nb_line_tFileOutputDelimited_6++;
                resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
                                       CsvWritertFileOutputDelimited_6.writeNext(rowtFileOutputDelimited_6);




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	


				nb_line_tFileInputDelimited_6++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_6!=null){
    					csvReadertFileInputDelimited_6.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_6!=null){
    				globalMap.put("tFileInputDelimited_6_NB_LINE",nb_line_tFileInputDelimited_6);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_6!=null) {
				    	CsvWritertFileOutputDelimited_6.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_6");
					
						if(CsvWritertFileOutputDelimited_6!=null) {
					    	CsvWritertFileOutputDelimited_6.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductModelID = readInteger(dis);
					
					this.Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_JOBS_FINALV2_produto_limpo = new byte[0];
    static byte[] commonByteArray_JOBS_FINALV2_produto_limpo = new byte[0];

	
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String rowguid;

				public String getRowguid () {
					return this.rowguid;
				}
				
			    public String ModifiedDate;

				public String getModifiedDate () {
					return this.ModifiedDate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_JOBS_FINALV2_produto_limpo.length) {
				if(length < 1024 && commonByteArray_JOBS_FINALV2_produto_limpo.length == 0) {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[1024];
				} else {
   					commonByteArray_JOBS_FINALV2_produto_limpo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length);
			strReturn = new String(commonByteArray_JOBS_FINALV2_produto_limpo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_JOBS_FINALV2_produto_limpo) {

        	try {

        		int length = 0;
		
						this.ProductModelID = readInteger(dis);
					
					this.CatalogDescription = readString(dis);
					
					this.Name = readString(dis);
					
					this.rowguid = readString(dis);
					
					this.ModifiedDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.rowguid,dos);
					
					// String
				
						writeString(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",CatalogDescription="+CatalogDescription);
		sb.append(",Name="+Name);
		sb.append(",rowguid="+rowguid);
		sb.append(",ModifiedDate="+ModifiedDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File("C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/harmonized/FH_ProductModel.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
                String[] headColutFileOutputDelimited_7=new String[2];
            class CSVBasicSet_tFileOutputDelimited_7{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_7[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_7 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_7[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_7 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_7[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_7[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_7 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 =0;
            int currentRow_tFileOutputDelimited_7 = 0;


            CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
            csvSettings_tFileOutputDelimited_7.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
                            if(fileToDelete_tFileOutputDelimited_7.exists()) {
                                fileToDelete_tFileOutputDelimited_7.delete();
                            }
                            CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_7.setSeparator(csvSettings_tFileOutputDelimited_7.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_7.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_7.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_7.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_7.setLineEnd(""+csvSettings_tFileOutputDelimited_7.getRowDelim());
                    }
                        if(filetFileOutputDelimited_7.length()==0){
                                    headColutFileOutputDelimited_7[0]="ProductModelID";
                                    headColutFileOutputDelimited_7[1]="Name";
                            CsvWritertFileOutputDelimited_7.writeNext(headColutFileOutputDelimited_7);
                            CsvWritertFileOutputDelimited_7.flush();
                        }
                CsvWritertFileOutputDelimited_7.setEscapeChar(csvSettings_tFileOutputDelimited_7.getEscapeChar());
                CsvWritertFileOutputDelimited_7.setQuoteChar(csvSettings_tFileOutputDelimited_7.getTextEnclosure());
                CsvWritertFileOutputDelimited_7.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_7", CsvWritertFileOutputDelimited_7);
resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;	
				
				char fieldSeparator_tFileInputDelimited_7[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_7[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_7 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_7 = /** Start field tFileInputDelimited_7:FILENAME */"C:/Users/alons/Documents/MBA FIAP/DATAOPS/projeto_dataops/raw/ProductModel.csv"/** End field tFileInputDelimited_7:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;
	
				try{
					
						String[] rowtFileInputDelimited_7=null;
						int currentLinetFileInputDelimited_7 = 0;
	        			int outputLinetFileInputDelimited_7 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0;
			if(footer_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"US-ASCII")), fieldSeparator_tFileInputDelimited_7[0]);
		        			}
					
					
					csvReadertFileInputDelimited_7.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )
	        			csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
	        				csvReadertFileInputDelimited_7.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_7 > 0){
						for(totalLinetFileInputDelimited_7=0;totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++){
							csvReadertFileInputDelimited_7.readNext();
						}
						csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_7.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_7++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7   < 0? 0 : totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7 ;
	            		if(lastLinetFileInputDelimited_7 > 0){
	                		lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7 : lastLineTemptFileInputDelimited_7; 
	            		}else {
	                		lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
	            		}
	         
			          	csvReadertFileInputDelimited_7.close();
				        if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_7, fieldSeparator_tFileInputDelimited_7[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_7=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_7)),"US-ASCII")), fieldSeparator_tFileInputDelimited_7[0]);
						}
						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_7[0] != '\n') && (rowSeparator_tFileInputDelimited_7[0] != '\r') )	
	        				csvReadertFileInputDelimited_7.setLineEnd(""+rowSeparator_tFileInputDelimited_7[0]);
						
							csvReadertFileInputDelimited_7.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_7 != 0){
			        	for(currentLinetFileInputDelimited_7=0;currentLinetFileInputDelimited_7 < 1;currentLinetFileInputDelimited_7++){
			        		csvReadertFileInputDelimited_7.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_7 != 0 && csvReadertFileInputDelimited_7!=null && csvReadertFileInputDelimited_7.readNext() ) { 
	        		rowstate_tFileInputDelimited_7.reset();
	        
		        	rowtFileInputDelimited_7=csvReadertFileInputDelimited_7.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_7++;
	            
		            if(lastLinetFileInputDelimited_7 > -1 && currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_7++;
	            	if (limittFileInputDelimited_7 > 0 && outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
	                	break;
	            	}  
	                                                                      
					
	    							row6 = null;			
								
								boolean whetherReject_tFileInputDelimited_7 = false;
								row6 = new row6Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_7_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_7.length == 1 && ("\015").equals(rowtFileInputDelimited_7[0])){//empty line when row separator is '\n'
					
							row6.ProductModelID = null;
					
							row6.CatalogDescription = null;
					
							row6.Name = null;
					
							row6.rowguid = null;
					
							row6.ModifiedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_7 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_7 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
								
									if(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {
									
										row6.ProductModelID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_7) {
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductModelID", "row6", rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7], ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
										}
    								}else{
    									
											
												row6.ProductModelID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.ProductModelID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row6.CatalogDescription = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row6.CatalogDescription = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row6.Name = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row6.Name = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row6.rowguid = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row6.rowguid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_7 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length){
						
						
							
									row6.ModifiedDate = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];
									
							
						
						}else{
						
							
								row6.ModifiedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_7.getException()!=null) {
										throw rowstate_tFileInputDelimited_7.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_7 = true;
        							
                							System.err.println(e.getMessage());
                							row6 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ProductModelID = row6.ProductModelID ;
out6_tmp.Name = row6.Name ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out6");
					}
					


                        String[] rowtFileOutputDelimited_7=new String[2];
                            rowtFileOutputDelimited_7[0]=out6.ProductModelID == null ? null : String.valueOf(out6.ProductModelID);
                            rowtFileOutputDelimited_7[1]=out6.Name == null ? null : out6.Name;
                nb_line_tFileOutputDelimited_7++;
                resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);
                                       CsvWritertFileOutputDelimited_7.writeNext(rowtFileOutputDelimited_7);




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	


				nb_line_tFileInputDelimited_7++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_7!=null){
    					csvReadertFileInputDelimited_7.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_7!=null){
    				globalMap.put("tFileInputDelimited_7_NB_LINE",nb_line_tFileInputDelimited_7);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_7!=null) {
				    	CsvWritertFileOutputDelimited_7.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_7");
					
						if(CsvWritertFileOutputDelimited_7!=null) {
					    	CsvWritertFileOutputDelimited_7.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final produto_limpo produto_limpoClass = new produto_limpo();

        int exitCode = produto_limpoClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = produto_limpo.class.getClassLoader().getResourceAsStream("jobs_finalv2/produto_limpo_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = produto_limpo.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_5.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_6.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_7.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : produto_limpo");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     160398 characters generated by Talend Open Studio for Big Data 
 *     on the 2 de Maio de 2021 18h32min41s BRT
 ************************************************************************************************/